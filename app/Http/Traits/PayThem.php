<?php

namespace App\Http\Traits;

require __DIR__ . '/../../../vendor/autoload.php';

use App\Libraries\Paythem\PTN_API_v2;

trait PayThem
{

    protected function paythem_call_api($function, $parameters = [])
    {
        // The IV parameter MUST be a randomly generated, alpha-numeric string to
        // assure security. Below is for example only.
        // If IV is specified, the system switched encryption to openSSL and ignores the internal AES encryption.
        $api					        = new PTN_API_v2('demo', 2824, rand(1000000000000000, 9999999999999999));

        if($api->environment == 'demo'){ // Demo
            $api->ENCRYPT_RESPONSE	    = true;
            $api->DEBUG_OUTPUT          = true;
            $api->PUBLIC_KEY            = env('PAYTHEM_PUBLIC_KEY');
            $api->PRIVATE_KEY           = env('PAYTHEM_PRIVATE_KEY');
            $api->USERNAME              = env('PAYTHEM_USER');
            $api->PASSWORD              = env('PAYTHEM_PASSWORD');
        }elseif($api->environment == ''){ // Production
            $api->ENCRYPT_RESPONSE	    = true;
            $api->DEBUG_OUTPUT  	    = true;
            $api->PUBLIC_KEY            = env('PAYTHEM_PUBLIC_KEY');
            $api->PRIVATE_KEY           = env('PAYTHEM_PRIVATE_KEY');
            $api->USERNAME              = env('PAYTHEM_USER');
            $api->PASSWORD              = env('PAYTHEM_PASSWORD');
        }else
            die(PHP_EOL.'No environment specified.'.PHP_EOL);

        #$api->FUNCTION			        = 'get_OEMList'; // Has no PARAMETERS
        #$api->FUNCTION			        = 'get_BrandList'; // Has no PARAMETERS
        #$api->FUNCTION			        = 'get_ProductList'; // Has no PARAMETERS
        #$api->FUNCTION			        = 'get_SalesTransaction_ByDateRange'; // Requires FROM_DATE and TO_DATE with max 30 day difference
        #$api->FUNCTION			        = 'get_FinancialTransaction_ByDateRange'; // Requires FROM_DATE and TO_DATE with max 30 day difference
        #$api->FUNCTION			        = 'get_Vouchers'; // Requires PRODUCT_ID, QUANTITY and REFERENCE_ID (own reference, optional)
        #$api->FUNCTION			        = 'get_ProductAvailability'; // Requires PRODUCT_ID
        #$api->FUNCTION			        = 'get_AllProductAvailability'; // Has no PARAMETERS
        #$api->FUNCTION			        = 'get_ErrorDescription'; // Requires ERROR_ID
        #$api->PARAMETERS		        = [ // As defined in documentation, each function has different parameters
        #	'PRODUCT_ID'		        => 235, // Retrieved from get_ProductList
        #	'QUANTITY'                  => 1, // Max defined by system administrator, default 20.
        #	'REFERENCE_ID'              => 'MY OWN REFERENCE' // Generated by integrators system and stored by VVS.
        #];

        $api->FUNCTION                  = $function;
        $api->PARAMETERS		        = $parameters;

        $res					        = $api->callAPI($api->DEBUG_OUTPUT);
        return $res;
    }

    protected function update_paythem_product($products)
    {
        $store = \App\Model\Store::find(env('PAYTHEM_STORE_ID'));

        if($products){
            foreach ($products as $key => $value) {

                $insert_arr = [
                    "parent_id" => 0,
                    "allow_margin" => 1,
                    "product_type" => "paythem",
                    "itemcode" => $value['OEM_PRODUCT_VVSSKU'],
                    "product_name_en" => $value['OEM_PRODUCT_Name'],
                    "paythem_product_id" => $value['OEM_PRODUCT_ID'],
                    "stock" => $value['OEM_PRODUCT_Available'],
                    "product_store_stock" => $value['OEM_PRODUCT_Available'],
                    "product_store_price" => 0,
                    "product_image_url" => $value['OEM_PRODUCT_ImageURL'],
                ];

                $paythem_product_arr = [
                    "oem_id" => $value['OEM_ID'],
                    "oem_name" => $value['OEM_Name'],
                    "oem_brand_id" => $value['OEM_BRAND_ID'],
                    "oem_brand_name" => $value['OEM_BRAND_Name'],
                    "oem_brand_brand_product_format_id" => $value['OEM_BRAND_Brand_Product_Format_ID'],
                    "oem_brand_brand_product_format_desc" => $value['OEM_BRAND_Brand_Product_Format_Desc'],
                    "oem_brand_brand_product_format_fields" => $value['OEM_BRAND_Brand_Product_Format_Fields'],
                    "oem_product_id" => $value['OEM_PRODUCT_ID'],
                    "oem_product_name" => $value['OEM_PRODUCT_Name'],
                    "oem_product_vvssku" => $value['OEM_PRODUCT_VVSSKU'],
                    "oem_product_basecurrency" => $value['OEM_PRODUCT_BaseCurrency'],
                    "oem_product_basecurrencysymbol" => $value['OEM_PRODUCT_BaseCurrencySymbol'],
                    "oem_product_unitprice" => $value['OEM_PRODUCT_UnitPrice'],
                    "oem_product_sellprice" => $value['OEM_PRODUCT_SellPrice'],
                    "oem_product_redemptioninstructions" => $value['OEM_PRODUCT_RedemptionInstructions'],
                    "oem_product_imageurl" => $value['OEM_PRODUCT_ImageURL'],
                    "oem_product_available" => $value['OEM_PRODUCT_Available']
                ];
                
                //Check Product Already Exist
                $baseProductExist = \App\Model\BaseProduct::where(['paythem_product_id' => $value['OEM_PRODUCT_ID']])->first();
                if(!$baseProductExist){

                    $create = \App\Model\BaseProduct::create($insert_arr);
                    if($create){
                    
                        if($store->back_margin > 0){
                            $product_distributor_price = ($value['OEM_PRODUCT_SellPrice'] - (($product_store->back_margin / 100) * $value['OEM_PRODUCT_SellPrice']));
                        }else{
                            $product_distributor_price = $value['OEM_PRODUCT_SellPrice'];
                        }

                        $base_product = \App\Model\BaseProduct::find($create->id);

                        $insert_arr['fk_product_id'] = $base_product->id;
                        $insert_arr['fk_store_id'] = $store->id;
                        $insert_arr['product_distributor_price_before_back_margin'] = $value['OEM_PRODUCT_SellPrice'];
                        $insert_arr['product_distributor_price'] = $product_distributor_price;
                        $insert_arr['product_store_updated_at'] = date('Y-m-d H:i:s');

                        $diff = $insert_arr['product_store_price'] - $product_distributor_price;
                        if ($insert_arr['allow_margin'] == 1 || ($insert_arr['allow_margin'] == 0 && $diff < 0)) {
                            $priceArr = calculatePriceFromFormula($product_distributor_price, $base_product->fk_offer_option_id, $base_product->fk_brand_id, $base_product->fk_sub_category_id, $insert_arr['fk_store_id']);
                            $insert_arr['margin'] = $priceArr[1];
                            $insert_arr['product_store_price'] = $priceArr[0];
                            $insert_arr['base_price'] = $priceArr[2];
                            $insert_arr['base_price_percentage'] = $priceArr[3];
                            $insert_arr['discount_percentage'] = $priceArr[4];
                            $insert_arr['fk_price_formula_id'] = $priceArr[5];
                        } else {
                            $profit = abs($product_distributor_price - $request->input('product_store_price'));
                            $margin = number_format((($profit / $product_distributor_price) * 100), 2);
                            $insert_arr['margin'] = $margin;
                            $insert_arr['product_store_price'] = $request->input('product_store_price');
                            $insert_arr['base_price'] = $request->input('base_price');
                            $insert_arr['base_price_percentage'] = number_format(((($insert_arr['base_price']-$insert_arr['product_distributor_price'])/$insert_arr['product_distributor_price']) * 100), 2);
                            $insert_arr['discount_percentage'] = number_format(((($insert_arr['base_price']-$insert_arr['product_store_price'])/$insert_arr['base_price']) * 100), 2);
                            $insert_arr['fk_price_formula_id'] = 0;
                        }
                        
                        $create = \App\Model\BaseProductStore::create($insert_arr);

                        if($create){
                            $insert_arr['fk_product_store_id'] = $create->id;
                            $base_product->update($insert_arr);
                        }

                        $paythem_product_arr['fk_product_id'] = $base_product->id;

                        \App\Model\PayThemProduct::create($paythem_product_arr);
                    }
                }else{

                    $base_product = \App\Model\BaseProduct::find($baseProductExist->id);
                    $update = $base_product->update($insert_arr);

                    if($update){

                        if($store->back_margin > 0){
                            $product_distributor_price = ($value['OEM_PRODUCT_SellPrice'] - (($product_store->back_margin / 100) * $value['OEM_PRODUCT_SellPrice']));
                        }else{
                            $product_distributor_price = $value['OEM_PRODUCT_SellPrice'];
                        }
                        
                        $insert_arr['fk_product_id'] = $base_product->id;
                        $insert_arr['fk_store_id'] = $store->id;
                        $insert_arr['product_distributor_price_before_back_margin'] = $value['OEM_PRODUCT_SellPrice'];
                        $insert_arr['product_distributor_price'] = $product_distributor_price;
                        $insert_arr['product_store_updated_at'] = date('Y-m-d H:i:s');

                        $diff = $insert_arr['product_store_price'] - $product_distributor_price;
                        if ($insert_arr['allow_margin'] == 1 || ($insert_arr['allow_margin'] == 0 && $diff < 0)) {
                            $priceArr = calculatePriceFromFormula($product_distributor_price, $base_product->fk_offer_option_id, $base_product->fk_brand_id, $base_product->fk_sub_category_id, $insert_arr['fk_store_id']);
                            $insert_arr['margin'] = $priceArr[1];
                            $insert_arr['product_store_price'] = $priceArr[0];
                            $insert_arr['base_price'] = $priceArr[2];
                            $insert_arr['base_price_percentage'] = $priceArr[3];
                            $insert_arr['discount_percentage'] = $priceArr[4];
                            $insert_arr['fk_price_formula_id'] = $priceArr[5];
                        } else {
                            $profit = abs($product_distributor_price - $request->input('product_store_price'));
                            $margin = number_format((($profit / $product_distributor_price) * 100), 2);
                            $insert_arr['margin'] = $margin;
                            $insert_arr['product_store_price'] = $request->input('product_store_price');
                            $insert_arr['base_price'] = $request->input('base_price');
                            $insert_arr['base_price_percentage'] = number_format(((($insert_arr['base_price']-$insert_arr['product_distributor_price'])/$insert_arr['product_distributor_price']) * 100), 2);
                            $insert_arr['discount_percentage'] = number_format(((($insert_arr['base_price']-$insert_arr['product_store_price'])/$insert_arr['base_price']) * 100), 2);
                            $insert_arr['fk_price_formula_id'] = 0;
                        }

                        $base_product_store = \App\Model\BaseProductStore::where(['fk_product_id' => $base_product->id])->first();
                        
                        if($base_product_store){
                            if($base_product_store->update($insert_arr)){
                                $base_product->update($insert_arr);
                            }
                        }

                        $paythem_product_arr['fk_product_id'] = $base_product->id;

                        $paythem_product = \App\Model\PayThemProduct::where('oem_product_id',$value['OEM_PRODUCT_ID'])->first();
                        if($paythem_product){
                            $paythem_product->update($paythem_product_arr);
                        }else{

                            \App\Model\PayThemProduct::create($paythem_product_arr);
                        }

                    }
                }
            }
        }
    }

}
